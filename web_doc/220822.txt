● 데이터 포맷 
- 사용자에게 화면이 아닌, 데이터만을 제공한다고 했을 때, 공용적으로 사용할 수 있도록 데이터 형식을 맞춰주어야 사용자 입장에서 특별한 규칙없이 범용적으로 쉽게 활용이 가능
- 웹상에서 자주 사용되는 서식 : 
	① csv : 데이터를 2차원적으로 나타냄, 첫 번째 줄은 header(생략 가능), 주로 쉼표로 column을 구분, 한 줄(행)로 데이터를 구분해 기록
	② xml : 큰 태그 안에 작은 태그로 나누어 구분 -> 데이터 표현 가능, 여러 개의 데이터는 형제로써 같은 태그로 구분,  세세한 	제약을 가질 수 있어서 잘못된 기록을 쉽게 확인 가능 but 사용이 어려움
	③ Json(javascript object Notation) : javascript가 객체를 나타내기 위한 표현으로 사용(객체는 모든 것을 표현 가능), 객체 하		나를 중괄호로 나타냄, 중괄호 안에 이름과 값이 쌍을 이루어 데이터를 표현, 문자열로 되어있어서 정보 자르기 쉬움, 사람이 읽	고 보기에도 쉬움, 규칙이 key/value만 있으면 돼서 사용이 쉽고 유연하게 데이터를 다룰 수 있음
=> 범용적으로 사용되는 데이터 포맷들은 라이브러리를 가짐, 라이브러리로 변환 등이 조금 더 쉬움

● Json
MVNRepository - JsonLibraries - Jackson Databind 2.13.3 Maven에서 코드 복사 - pom.xml <dependencies>에 붙여넣기

● json pojo : jason을 pojo(plain old java object : getter, setter가 있는 java객체)로 변환
- 결과로 출력된 json값을 복사붙여넣기 + package명, source type(데이터 양식), annotation(주석 있는거 싫으면 none, 암거나 노상관)
- parsing 안 되면 annotaion Jackson 2.x로!

● HTTPBin : 요청보내기를 연습할 수 있는 사이트, 요청을 보내면 요청 그대로를 응답으로 보내줌
▶ media type(MIME type) : 인터넷에 전달되는 파일 포맷과 포맷 콘텐츠를 위한 2 부분의 식별자
- 전달 받는 포맷타입, content-type 설정해주면 됨

● Web API : 클라이언트가 정의된 인터페이스를 사용하여 HTTP 프로토콜을 통한 서버와 상호 작용하는 시스템
- 요청을 통해서 기능 사용 가능
- API의 주소(URL), 요청 방식, header/ body 내용 설정 해주면 됨

● okhttp : http 요청 보낼 때?
- MVNRepository - httpclients - okhttp 4.10 maven 복붙

● Jsoup : html문서를 전달받아 요청을 보낸 후 css selector로 원하는 요소를 찾아서 출력 (최신버전 maven 복붙)
* 웹사이트 header에 <meta>로 간략한 정보를 넣어두는 경우 o

● ajax : javascript로 특정 주소로 요청을 보내는 기술, 비동기로 일어남(사용자 화면에는 보이지 않게끔(요청 흐름을 알 수 없게끔, 화면이 변하지 않고) 보낼 수 있음)
