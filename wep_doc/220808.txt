● 렌더링 : 화면에 구현하는 것
▶ client에게 화면 보여주는 법
① client-side rendering : html문서를 그대로 전달해서 사용자가 browser를 이용해 보게 된다면 오늘 날짜에 대해 화면에 그려줄 수 있음
② server-side rendering : server측에서 html 문서를 보내기 전부터 날에 맞는 날짜를 미리 렌더링하고 브라우저에 전송
	- 화면을 동적으로 보여줄 수 있음
	- 서버에만 존재하는 자원에 대해서 렌더링이 자유로움(그 때마다 들어오는 요청에 맞춰서 수행), browser는 요청을 보내는 역할에서 끝

● out : jsp의 텍스트를 출력하는 객체, 출력 스트림(jspwriter)
- 줄여서 <%= %> 이렇게 사용할 수 있게 함, 표현식과 똑같음
- 표현식과 달리 문자열을 그대로 출력할 수 있으므로 <% %> html과의 구분을 따로 해주지 않고, out.println()의 괄호 안에 그대로 담아주면 됨 (표현식은 html은 표현식 안에 담기지 않도록 써야함)
- 출력 buffer를 가져서 가득 차야 출력을 해줌 -> 때마다 출력하도록 설정 가능 (page directive에 <%@ page autoFlash="true" %> 설정 가능, but 기본값이 true이므로 따로 해줄 필요 x)

● request 객체 : 사용자 요청에 대한 객체
- request.getParameter("파라미터") : 파라미터의 값 받아오기
● response 객체 : 원하는 응답을 만들어내기 위해 조작을 할 수 있는 응답 객체, head/ body 설정 가능
- Sendredirect : 사용자에게 페이지를 이동하라고 응답을 보내주는 메소드 => 'redirect 응답'
	- redirect가 일을 하면 buffer가 일을 하지 않아서 out.println()이 나오지 않음
	- redirect는 전달받은 응답(연결 끊김)으로 새 요청(새로 연결)을 만들어 냄
-> 이 때 문자 print하고 싶으면 
① 연결 유지
② 아까 온 http에서의 상태를 서버가 기억하려고 id(세션id)를 부여하고 세션(=서버가 가진 기억)을 가짐, 다시 재요청하면 id값으로 같은 요청임을 앎, client는 cookie로 기억하는데, 브라우저에서 요청을 보낼 때 쿠키 내용을 같이 담아서 보냄
	- 각각의 저장값은 다를 수 있지만(서버는 서버에 필요한 부분, cookie는 서버에서 저장하라고 한 부분), 세션 id는 같음
	- 로그인해서 생긴 cookie에서 id값을 탈취하면, 로그인된 것처럼 속일 수 있음, 자동 로그아웃이 될 때는 서버가 세션을 		지워서 로그아웃이 된 것 (쿠키에는 남아있음)

* 논리페이지(페이지간 연결, 요청에 대한 응답 등)와 뷰(보여주는 페이지) 구분하는 것이 유지보수에 유리
* 프로젝트 마우스 우클릭 - properties - web project settings에서 context root 변경가능!